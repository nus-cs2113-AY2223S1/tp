@startuml

hide footbox

activate ": Duke"

": Duke" -> ": Ui" : getUserInput()
activate ": Ui"
": Ui" --> ": Duke" : userInput : String
deactivate ": Ui"

": Duke" -> ": CommandParser" : ": CommandParser".getUserCommand(userInput)
activate ": CommandParser"

": CommandParser" -> ": CommandParser" : parseUserCommand(userInput)
activate ": CommandParser"

": CommandParser" --> ": CommandParser" : userInputTokenized : String[]
deactivate ": CommandParser"

alt list command

    ": CommandParser" -> ": CommandParser" : isValidListCommand(userInputTokenized)
    activate ": CommandParser"

    ": CommandParser" --> ": CommandParser" : :boolean
    deactivate ": CommandParser"

    opt isValid

        create ": ListCommand"
        ": CommandParser" -> ": ListCommand" : ListCommand(userInputTokenized, CommandType.LIST)
        activate ": ListCommand"
        ": ListCommand" --> ": CommandParser" : newListCommand : ListCommand
        deactivate ": ListCommand"

    end

else other command

end

": CommandParser" --> ": Duke" : newUserCommand : Command
deactivate ": CommandParser"

alt list command

    ": Duke" -> ": Duke" : executeListCommand(newUserCommand)
    activate ": Duke"

    alt list option equals "UNIVERSITIES"

        ": Duke" -> ": Database" : getUniversities()
        activate ": Database"
        ": Database" --> ": Duke" : universities : ArrayList<University>
        deactivate ": Database"

        ": Duke" -> ": Ui" : printUniversitiesIn": Database"(universities)
        activate ": Ui"
        deactivate ": Ui"

    else list option equals "MODULES"

        ": Duke" -> ": Database" : getModuleMappings()
        activate ": Database"
        ": Database" --> ": Duke" : moduleMappings : ArrayList<ModuleMappings>
        deactivate ": Database"

        ": Duke" -> ": Ui" : printMappings(moduleMappings)
        activate ": Ui"
        deactivate ": Ui"

    else list option equals "module"

        ": Duke" -> ": ListCommand" : getModuleCode()
        activate ": ListCommand"
        ": ListCommand" --> ": Duke" : moduleCode :String
        deactivate ": ListCommand"
        
        ": Duke" -> ": Database" : findNusMapping(moduleCode)
        activate ": Database"
        ": Database" --> ": Duke" : moduleMappings : ArrayList<ModuleMapping>
        deactivate ": Database"

        ": Duke" -> ": Ui" : printMappings(moduleMappings)
        activate ": Ui"
        deactivate ": Ui"

    else list option equals "universitiy"

        ": Duke" -> ": ListCommand" : getUniversityName()
        activate ": ListCommand"
        ": ListCommand" --> ": Duke" : universityName :String
        deactivate ": ListCommand"
        
        ": Duke" -> ": Database" : findUniversityMapping(universityName)
        activate ": Database"
        ": Database" --> ": Duke" : moduleMappings : ArrayList<ModuleMapping>
        deactivate ": Database"

        ": Duke" -> ": Ui" : printMappings(moduleMappings)
        activate ": Ui"
        deactivate ": Ui"

    end

deactivate ": Duke"
else other command
end
deactivate ": Duke"

@enduml