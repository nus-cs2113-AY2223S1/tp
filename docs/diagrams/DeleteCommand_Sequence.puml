@startuml

activate ":Duke"

hide footbox

":Duke" -> ":Ui" : getUserInput()
activate ":Ui"

":Ui" --> ":Duke" : userInput : String
deactivate ":Ui"

":Duke" -> ":CommandParser" : CommandParser.getUserCommand(userInput)
activate ":CommandParser"

":CommandParser" -> ":CommandParser" : parseUserCommand(userInput)
activate ":CommandParser"

":CommandParser" --> ":CommandParser" : userInputTokenized : String[]
deactivate ":CommandParser"

alt delete command

    ":CommandParser" -> ":CommandParser" : isValidDeleteCommand(userInputTokenized)
    activate ":CommandParser"

    ":CommandParser" --> ":CommandParser" : boolean
    deactivate ":CommandParser"

    opt is valid delete command
        ":CommandParser" -> ":CommandParser" : parseLesson(userInputTokenized)
        activate ":CommandParser"

        ":CommandParser" -> ":Database" : findPuMapping(userInputTokenized[MODULE_INDEX])
        activate ":Database"

        ":Database" --> ":CommandParser" : puModule : Module
        deactivate ":Database"

        create ":Lesson"
        ":CommandParser" -> ":Lesson" : Lesson()
        activate ":Lesson"

        ":Lesson" --> ":CommandParser" : lesson : Lesson
        deactivate ":Lesson"

        ":CommandParser" --> ":CommandParser" : lessonToDelete : Lesson
        deactivate ":CommandParser"

        create ":DeleteCommand"
        ":CommandParser" -> ":DeleteCommand" : DeleteCommand(userInputTokenized, CommandType.DELETE, isDeleteModule,lessonToDelete)
        activate ":DeleteCommand"

        ":DeleteCommand" --> ":CommandParser" : newDeleteCommand : DeleteCommand
        deactivate ":DeleteCommand"
    end

else other command

end

":CommandParser" --> ":Duke" : newUserCommand : Command
deactivate ":CommandParser"

alt delete command

":Duke" -> ":Duke" : executeDeleteCommand(userUniversityListManager, timetableManager, newUserCommand)
activate ":Duke"

    ":Duke" -> ":DeleteCommand" : getLesson()
    activate ":DeleteCommand"

    ":DeleteCommand" --> ":Duke" : lesson :":Lesson"
    deactivate ":DeleteCommand"

    alt lesson is not null
    ":Duke" -> ":TimetableManager" : deleteLesson(lesson, false)
    activate ":TimetableManager"

    deactivate ":TimetableManager"

    ":Duke" -> ":UserStorageParser" : storeTimetable(timetableManager)
    activate ":UserStorageParser"

    deactivate ":UserStorageParser"

    else lesson is null
        ":Duke" -> ":DeleteCommand" : getUniversityName()
        activate ":DeleteCommand"

        ":DeleteCommand" --> ":Duke" : universityName :String
        deactivate ":DeleteCommand"

        alt module code is null
        ":Duke" -> ":UserUniversityListManager" : deleteList(universityName)
        activate ":UserUniversityListManager"

        deactivate ":UserUniversityListManager"

        ":Duke" -> ":TimetableManager" : deleteTimetable(universityName)
        activate ":TimetableManager"

        deactivate ":TimetableManager"

        else module code is not null
        ":Duke" -> ":DeleteCommand" : getModuleCode()
        activate ":DeleteCommand"

        ":DeleteCommand" --> ":Duke" : moduleCode :String
        deactivate ":DeleteCommand"

        ":Duke" -> ":UserUniversityListManager" : deleteModule(universityName, moduleCode)
        activate ":UserUniversityListManager"

        deactivate ":UserUniversityListManager"

        end

        ":Duke" -> ":UserStorageParser" : storeCreatedLists(userUniversityListManager)
        activate ":UserStorageParser"

        deactivate ":UserStorageParser"

    end

deactivate ":Duke"
else other command
end
deactivate ":Duke"

@enduml