@startuml
skinparam classAttributeIconSize 0
hide circle

class State {
- semester:int
- selectedModulesList: List<List<SelectedModule>>
+ getSelectedModulesList() : List<SelectedModule>
+ setSelectedModulesList(list: List<SelectedModule>)
+ getSemester() : int
+ setSemester(semester:int)
+ addSelectedModule(module:SelectedModule)
+ removeSelectedModule(module:SelectedModule)
}

State --> "*" SelectedModule

class SelectedModule {
- module:Module
- semester:int
- selectedSlots:Map<LessonType, String>
+ selectSlot(lessonType:LessonType, classNo:String)
+ getSelectedSlots() : Map<LessonType, String>
}

SelectedModule --> "1" Module

class ModuleLoader {
~ loadModules() : List<Module>
}

ModuleLoader -- Module : loads >

class Module {
+ acadYear : String
+ moduleCode : String
+ title : String
+ description: String
+ moduleCredit : int
+ department : String
+ faculty : String
+ workload : List<Integer>
+ semesterData : List<SemesterData>
+ prerequisite : String
+ corequisite : String
+ preclusion : String
{static} - moduleList : List<Module>
{static} - modulesByCode : Map<String, Module>
{static} + getAll() : List<Module>
{static} + get(moduleCode: String) : Module
+ getLevel() : int
+ getSemestersOffering() : List<Integer>
}

class SemesterData {
+ semester : int
+ timetable : List<RawLesson>
+ examDate : String
+ examDuration : int
+ lessonTypes : Set<LessonType>
+ getLessonTypes() : Set<LessonType>
+ getLessonsByTypeAndNo(type:LessonType, no: String) : List<RawLesson>
+ getClassNosByType(type:LessonType) : Set<String>
}

Module -right-> "1..4" SemesterData : Offered in

class RawLesson {
+ classNo : String
+ day : Day
+ endTime : String
+ startTime : String
+ lessonType : LessonType
+ venue : String
+ weeks : List<Integer>
+ size : int
}

SemesterData -up-> "1..*" RawLesson

@enduml